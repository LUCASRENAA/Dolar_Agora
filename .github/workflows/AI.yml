# Este workflow analisa os findings de Code Scanning do GitHub usando o modelo TinyLlama
# rodando localmente em um container Ollama.
name: Analisar Findings de Seguran√ßa com TinyLlama

on:
  # O 'pull_request_target' √© usado para garantir que o GITHUB_TOKEN tenha permiss√µes de escrita
  # (pull-requests: write) necess√°rias para comentar no PR.
  pull_request_target:
    types: [opened, reopened, synchronize]
    branches:
      - '*'
  # Adicione 'workflow_dispatch' para poder rodar manualmente para testes
  workflow_dispatch:

permissions:
  # Necess√°rio para ler o c√≥digo (checkout) e os eventos de seguran√ßa
  contents: read
  security-events: read
  # Necess√°rio para comentar no Pull Request
  pull-requests: write

jobs:
  analyze-findings:
    name: Analisar Findings de Seguran√ßa com TinyLlama
    # Usamos um runner ubuntu-latest que j√° vem com Docker pr√©-instalado
    runs-on: ubuntu-latest
    
    steps:
      # Etapa 1: Checkout do c√≥digo do Pull Request
      # Usamos o SHA do HEAD do PR para checkout, garantindo a seguran√ßa ao usar pull_request_target
      - name: Checkout reposit√≥rio com seguran√ßa
        uses: actions/checkout@v4
        with:
          # √â crucial verificar o c√≥digo que est√° sendo proposto
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1

      # Etapa 2: Instalar Ollama e TinyLlama em background
      - name: Iniciar Ollama e Pull TinyLlama
        # O docker-cli est√° dispon√≠vel no runner. Iniciamos o Ollama expondo a porta 11434
        run: |
          echo "üê≥ Iniciando container Ollama em background..."
          # Roda o Ollama em detached mode, expondo a porta 11434
          docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
          
          # Puxa o modelo TinyLlama. Isso pode levar um tempo.
          echo "‚¨áÔ∏è Puxando modelo tinyllama..."
          docker exec ollama ollama pull tinyllama
          
          # Espera um pouco para garantir que o servi√ßo de API esteja ativo
          echo "‚è±Ô∏è Aguardando 15 segundos para o Ollama inicializar a API..."
          sleep 15
          
          # Health check b√°sico: verifica se o modelo est√° carregado (opcional, mas bom)
          docker exec ollama ollama run tinyllama "Hello" || true

      # Etapa 3: Baixar findings de Code Scanning
      - name: Baixar findings de Code Scanning
        id: download_findings
        run: |
          # Cria o diret√≥rio para armazenar os JSONs
          mkdir -p findings
          
          # Baixa apenas os alerts de Code Scanning que s√£o abertos (state=open)
          # A l√≥gica de parsing original √© mais adequada para Code Scanning.
          echo "üì• Baixando findings de Code Scanning..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open" \
            -o findings/code-scanning.json
            
          # Verifica se o arquivo foi baixado e se √© um JSON v√°lido. 
          # Se o resultado for 403/404 ou um JSON vazio, o jq vai falhar, mas o script segue.
          if ! jq . findings/code-scanning.json > /dev/null 2>&1; then
              echo "[]" > findings/code-scanning.json
              echo "‚ö†Ô∏è Erro ou resultado vazio/inv√°lido ao baixar Code Scanning. Criando JSON vazio."
          fi

      # Etapa 4: Analisar findings com TinyLlama
      - name: Analisar findings com TinyLlama e Comentar no PR
        # Esta etapa requer 'jq' e 'curl' (j√° instalados no runner)
        run: |
          analyze_findings() {
            local file="findings/code-scanning.json"
            local type="Code Scanning"
            
            echo "üîé Analisando findings de ${type}..."
            
            # Conta o n√∫mero de findings
            count=$(jq length "$file")

            if [ "$count" -eq 0 ]; then
              echo "‚úÖ Nenhum finding de ${type} encontrado."
              return
            fi
            
            # Loop por cada finding encontrado
            for i in $(seq 0 $(($count - 1))); do
              finding=$(jq -r ".[$i]" "$file")

              # Extra√ß√£o de campos (ajustei para ser mais robusto com os caminhos do jq)
              number=$(echo "$finding" | jq -r '.number // "N/A"')
              created_at=$(echo "$finding" | jq -r '.created_at // "N/A"')
              description=$(echo "$finding" | jq -r '.rule.description // "N/A"')
              severity=$(echo "$finding" | jq -r '.rule.severity // "N/A"')
              location_path=$(echo "$finding" | jq -r '.most_recent_instance.location.path // "N/A"')
              location_line=$(echo "$finding" | jq -r '.most_recent_instance.location.start_line // "N/A"')
              message_text=$(echo "$finding" | jq -r '.most_recent_instance.message.text // "N/A"')
              html_url=$(echo "$finding" | jq -r '.html_url // "N/A"')
              help_uri=$(echo "$finding" | jq -r '.rule.help_uri // "N/A"')
              
              # Monta o prompt
              prompt="A vulnerability was found in the repository's Code Scanning. Below are the details:

              - Finding ID: $number
              - Created At: $created_at
              - Description: $description
              - Severity: $severity
              - File Path: $location_path
              - Line Number: $location_line
              - Message: $message_text

              Do you consider this a false positive? Justify your answer briefly in Portuguese, focusing on the file and line number provided.

              For reference, here is the rule documentation: $help_uri
              GitHub Finding Link: $html_url"
              
              # Escapa o prompt para ser um JSON string v√°lido
              escaped_prompt=$(jq -Rs <<< "$prompt")

              # Tenta o curl, usando a porta padr√£o 11434
              # Adiciona um retry simples com loop
              MAX_RETRIES=3
              for attempt in $(seq 1 $MAX_RETRIES); do
                  echo "üîå Tentativa $attempt de conex√£o com Ollama..."
                  response=$(curl -s -X POST http://localhost:11434/api/generate \
                    -H "Content-Type: application/json" \
                    -d "{\"model\": \"tinyllama\", \"stream\": false, \"prompt\": $escaped_prompt}" \
                    --write-out "%{http_code}" \
                    --output response.json)
                  
                  HTTP_CODE="${response: -3}"
                  
                  if [ "$HTTP_CODE" -eq 200 ]; then
                      echo "‚úÖ Sucesso na conex√£o com Ollama."
                      break
                  fi
                  
                  echo "‚ùå Ollama retornou c√≥digo HTTP $HTTP_CODE. Tentando novamente em 5 segundos..."
                  sleep 5
                  
                  if [ "$attempt" -eq "$MAX_RETRIES" ]; then
                      echo "üö® Falha ao conectar ao Ollama ap√≥s $MAX_RETRIES tentativas."
                      result="N√£o foi poss√≠vel obter a an√°lise da IA devido a falha de conex√£o com o TinyLlama."
                      break
                  fi
              done

              # Se o curl foi bem-sucedido (c√≥digo 200), extrai a resposta
              if [ "$HTTP_CODE" -eq 200 ]; then
                  result=$(jq -r '.response // .error // "Resposta da IA em formato inesperado."' response.json)
              fi

              echo "üß† Resultado da IA para Finding #$number: $result"
              
              # Comenta no Pull Request
              if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
                # Usa um bloco EOF para montar o corpo do coment√°rio em Markdown
                comment_body=$(cat <<EOF
                ### ü§ñ An√°lise Autom√°tica da TinyLlama (Code Scanning)

                **Finding ID:** #$number
                **Severidade:** $severity
                **Caminho:** \`$location_path:$location_line\`

                **Descri√ß√£o do Finding:**
                > $description

                **Resultado da IA:**
                \`\`\`
                $result
                \`\`\`

                [üîó Ver finding no GitHub]($html_url)
                EOF
                                )

                # Escapa o corpo do coment√°rio para ser injetado no payload JSON do GitHub API
                escaped_body=$(printf '%s' "$comment_body" | jq -Rs .)

                # Envia o coment√°rio para o Pull Request
                curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -X POST \
                    -d "{\"body\": $escaped_body}" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
                
                echo "üìù Coment√°rio postado no PR #${{ github.event.pull_request.number }}"

              else
                echo "‚è≠Ô∏è Ignorando postagem de coment√°rio. O workflow n√£o est√° rodando em um evento pull_request_target."
              fi
              
            done
          }

          analyze_findings

      # Etapa 5: Limpar o ambiente Ollama
      - name: Parar e remover ambiente TinyLlama
        if: always()
        run: |
          echo "üõë Parando e removendo container Ollama..."
          docker stop ollama || true
          docker rm ollama || true
